:mod:`cli` --- command line tools
=================================

.. module:: cli
    :synopsis: Command line tools.
.. moduleauthor:: Will Maier <willmaier@ml1.net>
.. sectionauthor:: Will Maier <willmaier@ml1.net>

:mod:`cli` provides a suite of tools that simplify the process of
developing testable, robust and easy-to-use command line applications.
With :mod:`cli`, your scripts (and larger applications) can use Python's
extensive standard library to parse configuration files and command line
parameters, log messages and even daemonize. All of these services are
made available through the :class:`Application` class, an instance of
which is passed to your script at run time. Even though it is
featureful, :mod:`cli` is decidedly unmagical.

.. highlight:: python

Command line parsing::

    #!/usr/bin/env python
    import cli

    @cli.CommandLineApp
    def ls(app):
        pass
    
    ls.add_param("-l", "--long", help="list in long format", default=False, action="store_true")

    if __name__ == "__main__":
        ls.run()

.. highlight:: none

    $ python ls.py -h
    usage: ls [-h] [-l]

    optional arguments:
      -h, --help  show this help message and exit
      -l, --long  list in long format

.. highlight:: python

Logging::

    #!/usr/bin/env python
    import time
    import cli
    @cli.LoggingApp
    def sleep(app):
        app.log.debug("About to sleep for %d seconds" % app.params.seconds)
        time.sleep(app.params.seconds)
    
    sleep.add_param("seconds", help="time to sleep", default=1, type=int)

    if __name__ == "__main__":
        sleep.run()

.. highlight:: none

    $ python sleep.py -h
    usage: sleep [-h] [-l] [-q] [-s] [-v] seconds

    positional arguments:
      seconds        time to sleep

    optional arguments:
      -h, --help     show this help message and exit
      -l, --logfile  log to file (default: log to stdout)
      -q, --quiet    decrease the verbosity
      -s, --silent   only log warnings
      -v, --verbose  raise the verbosity
    $ python sleep.py -vv 3
    About to sleep for 3 seconds

.. highlight:: python

Daemonizing::

    #!/usr/bin/env python
    import cli
    @cli.DaemonizingApp
    def daemon(app):
        if app.params.daemonize:
            app.log.info("About to daemonize")
            app.daemonize()

    if __name__ == "__main__":
        daemon.run()

.. highlight:: none

    $ python daemon.py -h
    usage: daemon [-h] [-l] [-q] [-s] [-v] [-d] [-u USER] [-p PIDFILE]

    optional arguments:
      -h, --help            show this help message and exit
      -l, --logfile         log to file (default: log to stdout)
      -q, --quiet           decrease the verbosity
      -s, --silent          only log warnings
      -v, --verbose         raise the verbosity
      -d, --daemonize       run the application in the background
      -u USER, --user USER  change to USER[:GROUP] after daemonizing
      -p PIDFILE, --pidfile PIDFILE
                            write PID to PIDFILE after daemonizing
    $ python daemon.py -d -vv
    About to daemonize

..highlight:: python

:mod:`cli.app` -- basic applications
------------------------------------

.. module:: cli.app
    :synopsis: Basic applications.

The :mod:`cli.app` module establishes the basis for all of the other
applications and is a good place to start when looking to extend
:class:`Application` functionality or to understand the basic API.


.. class:: Application(main=None, name=None, exit_after_main=True, stdin=None, stdout=None, version=None, description=None, argv=None, profiler=None)
    
    :class:`Application` constructors should always be called with
    keyword arguments, though the *main* argument may be passed
    positionally (as when :class:`Application` or its subclasses are
    instantiated as decorators). Arguments are:

    *main* is the callable object that performs the main work of the
    application. The callable must accept an :class:`Application`
    instance as its sole argument. If *main* is ``None``, it is assumed that
    a valid callable will be passed to the :meth:`__call__` method (when
    using an :class:`Application` instance as a decorator). If *main* is
    not None, the :meth:`setup` method will be called, allowing
    subclasses to customize the order in which certain setup steps are
    executed.

    *name* is the name of the application itself. If *name* is not ``None``,
    the :attr:`name` property will inspect the :attr:`main` callable and
    use its function or class name.

    *exit_after_main* determines whether the application will call
    :func:`sys.exit` after :attr:`main` completes.

    *stdin*, *stderr* and *stdout* are file objects that represent the 
    usual application input and outputs. If they are ``None``, they will
    be replaced with :data:`sys.stdin`, :data:`sys.stderr` and
    :data:`sys.stdout`, respectively.

    *version* is a string representing the application's version.

    *description* is a string describing the application. If
    *description* is ``None``, the :attr:`description` property will use
    the :attr:`main` callable's :attr:`__doc__` attribute instead.

    *argv* is a list of strings representing the options passed on the
    command line. If *argv* is ``None``, :data:`sys.argv` will be used
    instead.

    *profiler* is a :class:`Profiler` instance. If not ``None``, the
    profiler will be available to the running application.

    In all but a very few cases, subclases that override the constructor
    should call :method:`Application.__init__` at the end of the
    overridden method to ensure that the :method:`setup` method is
    called.

    .. method: __call__(main)

        Wrap the *main* callable and return an :class:`Application` instance.

        This method is useful when it is necessary to pass keyword
        arguments to the :class:`Application` constructor when
        decorating callables. For example::

            @cli.Application(stderr=None)
            def foo(app):
                pass

        In this case, :meth:`setup` will occur during :meth:`__call__`,
        not when the :class:`Application` is first constructed.

    .. method: setup()

        Configure the :class:`Application`.

        This method is provided so that subclasses can easily customize
        the configuration process without having to reimplement the base
        constructor. :meth:`setup` is called once, either by the base
        constructor or :meth:`__call__`.

    .. method: pre_run()
        
        Perform any last-minute configuration.

        The :meth:`pre_run` method is called by the :meth:`run` method
        before :attr:`main` is executed. This is a good time to do
        things like read a configuration file or parse command line
        arguments. The base implementation does nothing.

    .. method: run()

        Run the application, returning its return value.

        This method first calls :meth:`pre_run` and then calls
        :attr:`main`, passing it an instance of the :class:`Application`
        itself as its only argument. The return value is then passed to
        :meth:`post_run` which may modify it (or terminate the
        application entirely).

    .. method: post_run(returned)

        Clean up after the application.

        After :attr:`main` has been called, :meth:`run` passes the
        return value to this method. By default, :meth:`post_run`
        decides whether to call :func:`sys.exit` (based on the
        value of the :attr:`exit_after_main` attribute) or pass the
        value back to :meth:`run`. Subclasses should probably preserve
        this behavior.

    .. attribute:: description

        A string describing the application.

        Unless specified when the :class:`Application` was created, this
        property will examine the :attr:`main` callable and use its
        docstring (:attr:`__doc__` attribute).

    .. attribute:: name

        A string identifying the application.

        Unless specified when the :class:`Application` was created, this
        property will examine the :attr:`main` callable and use its
        name (:attr:`__name__` or :attr:`func_name` for classes or
        functions, respectively).

.. class:: CommandLineApp(main=None, usage=None, epilog=True, **kwargs)

    Command line applications extend the basic :class:`Application`
    framework to support command line parsing using the :mod:`argparse`
    module. As with :class:`Application` itself, *main* should be a
    callable. Other arguments are:

    *usage* is a string describing command line usage of the
    application. If it is not supplied, :mod:`argparse` will
    automatically generate a usage statement based on the application's
    parameters.

    *epilog* is text appended to the argument descriptions.

    The rest of the arguments are passed to the :class:`Application`
    constructor.

    .. method: setup()

        Configure the :class:`CommandLineApp`.

        During setup, the application instantiates the
        :class:`argparse.ArgumentParser` and adds a version parameter
        (:cmdoption:`-V`, to avoid clashing with :cmdoption:`-v`
        verbose).

    .. method: pre_run()

        Parse command line.

        During :meth:`pre_run`, :class:`CommandLineApp`
        passes the application's :attr:`argv` attribute to
        :meth:`argparse.ArgumentParser.parse_args`. The results are
        stored in :attr:`params`.

    .. method: add_param(*args, **kwargs)

        Add a parameter.

        :meth:`add_param` wraps
        :meth:`argparse.ArgumentParser.add_argument`, storing the
        parameter options in a dictionary. This information can be used
        later by other subclasses when deciding whether to override
        parameters.

    .. method: update_params(**params)

        Update the parameter namespace.

        The keys and values in *params* will become the names and values
        of attributes in the :attr:`params` attribute.

    .. attribute:: params

		The :attr:`params` attribute is an object with attributes
		containing the values of the parsed command line arguments.
		Specifically, its an instance of :class:`argparse.Namespace`,
		but only the mapping of attributes to argument values should be
		relied upon.
